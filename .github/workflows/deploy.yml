name: Deploy 

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    environment: main
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true  # This makes the image available locally instead of pushing
          tags: newbishara:latest
          build-args: |
          
      - name: Save Docker image to tar file
        run: docker save -o image.tar infobring-backend:staging

      - name: Upload Docker image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar
          retention-days: 1  # Keep artifact for 1 day to save storage

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: .  # Download to current directory
          
      - name: Deploy to STAGING environment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST}}
          username: ${{ secrets.SERVER_USER}}
          key: ${{ secrets.SERVER_SSH_KEY}}
          script: |
            # Load the Docker image from the tar file
            docker load -i image.tar
            
            # Stop and remove the old container
            docker compose down infobring-backend || true
            
            # Clean up unused Docker data (be careful with this in production)
            docker image prune -f  
            docker container prune -f
            
            # Start the new container
            docker compose up -d infobring-backend || true
            
            # Clean up the tar file
            rm -f image.tar
            
            # Verify the container is running
            echo "Current running containers:"
            docker ps --filter "name=infobring-backend"
        
